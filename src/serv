#!/usr/bin/env php
<?php

$params = getopt('', ['address::', 'port::', 'threads::']);

$address = $params['address'] ?? '127.0.0.1';
$port = $params['port'] ?? 5030;
$threads = $params['threads'] ?? 1;

$socket_create = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
if ($socket_create === false) {
    die('Socket created failed: ' . socket_strerror(socket_last_error()) . PHP_EOL);
}

socket_set_option($socket_create, SOL_SOCKET, SO_REUSEADDR, 1);

if (!socket_bind($socket_create, $address, $port)) {
    die('Socket bind failed: ' . socket_strerror(socket_last_error()) . PHP_EOL);
}

if (!socket_listen($socket_create, 1)) {
    die('Socket listen failed: ' . socket_strerror(socket_last_error()) . PHP_EOL);
}

for ($i = 0; $i < $threads; $i ++) {

    $pid_fork = pcntl_fork();

    // child process
    if ($pid_fork == 0) {

        while (true) {

            $pid = posix_getpid();
            $socket = socket_accept($socket_create);

            echo '[' . $pid_fork . '] Acceptor connect: ' . $socket . PHP_EOL;
            socket_write($socket, 'Process pid: ' . $pid . PHP_EOL);

            $command = trim(socket_read($socket, 2048));
            echo 'Retrieve command: ' . $command . PHP_EOL;

            socket_write($socket, '[' . $command . ']' . PHP_EOL);

            socket_close($socket);
        }
    }
}

while (($cid = pcntl_waitpid(0 , $status)) != -1) {

    $exit_code = pcntl_wexitstatus($status);
    echo '[' . $cid . '] exited with status: ' . $exit_code . PHP_EOL;
}

socket_close($socket_create);